

/*
MAVLink protocol implementation (auto-generated by mavgen.py)

Note: this file has been auto-generated. DO NOT EDIT
*/

using System;
using System.Collections;
using System.Collections.Generic;
    
namespace MavLink
{
    public static class MavlinkSettings
    {
		public const string WireProtocolVersion = "1.0";
		public const byte ProtocolMarker = 0xfe;
		public const bool CrcExtra = true;
		public const bool IsLittleEndian = true;
    }
    
    public delegate MavlinkMessage MavlinkPacketDeserializeFunc(byte[] bytes, int offset);

    //returns the message ID, offset is advanced by the number of bytes used to serialize
    public delegate int MavlinkPacketSerializeFunc(byte[] bytes, ref int offset, object mavlinkPacket);
 
    public class MavPacketInfo
    {
        public MavlinkPacketDeserializeFunc Deserializer;
        public int [] OrderMap;
        public byte CrcExtra;

         public MavPacketInfo(MavlinkPacketDeserializeFunc deserializer, byte crcExtra)
         {
             this.Deserializer = deserializer;
             this.CrcExtra = crcExtra;
         }
    }
 
    public static class MavLinkSerializer
    {
        public static void SetDataIsLittleEndian(bool isLittle)
        {
            bitconverter.SetDataIsLittleEndian(isLittle);
        }
    
        private static readonly FrameworkBitConverter bitconverter = new FrameworkBitConverter(); 
    
        public static Dictionary<int, MavPacketInfo> Lookup = new Dictionary<int, MavPacketInfo>
        {
			{0, new MavPacketInfo(Deserialize_IMU_RAW, 202)},
			{1, new MavPacketInfo(Deserialize_IMU, 188)},
			{2, new MavPacketInfo(Deserialize_PRESSURE, 217)},
			{3, new MavPacketInfo(Deserialize_SONAR, 58)},
			{4, new MavPacketInfo(Deserialize_ATTITUDE, 185)},
			{5, new MavPacketInfo(Deserialize_POSITION, 50)},
			{6, new MavPacketInfo(Deserialize_ROCKER, 253)},
			{7, new MavPacketInfo(Deserialize_PARAM_READ_REQUEST, 97)},
			{8, new MavPacketInfo(Deserialize_PARAM_READ_ACK, 14)},
			{9, new MavPacketInfo(Deserialize_PARAM_WRITE, 11)},
			{10, new MavPacketInfo(Deserialize_PARAM_WRITE_ACK, 54)},
			{11, new MavPacketInfo(Deserialize_CMD_WRITE, 220)},
			{12, new MavPacketInfo(Deserialize_CMD_ACK, 251)},
			{13, new MavPacketInfo(Deserialize_BATTERY_VOLTAGE, 146)},
			{14, new MavPacketInfo(Deserialize_USV_STATE, 40)},
			{15, new MavPacketInfo(Deserialize_USV_SET, 247)},
			{16, new MavPacketInfo(Deserialize_UAV_SET, 186)},
		};

		internal static MavlinkMessage Deserialize_IMU_RAW(byte[] bytes, int offset)
		{
			return new Msg_imu_raw
			{
				acc_x_raw = bitconverter.ToInt16(bytes, offset + 0),
				acc_y_raw = bitconverter.ToInt16(bytes, offset + 2),
				acc_z_raw = bitconverter.ToInt16(bytes, offset + 4),
				temp_raw = bitconverter.ToInt16(bytes, offset + 6),
				gyro_x_raw = bitconverter.ToInt16(bytes, offset + 8),
				gyro_y_raw = bitconverter.ToInt16(bytes, offset + 10),
				gyro_z_raw = bitconverter.ToInt16(bytes, offset + 12),
				mag_x_raw = bitconverter.ToInt16(bytes, offset + 14),
				mag_y_raw = bitconverter.ToInt16(bytes, offset + 16),
				mag_z_raw = bitconverter.ToInt16(bytes, offset + 18),
			};
		}

		internal static MavlinkMessage Deserialize_IMU(byte[] bytes, int offset)
		{
			return new Msg_imu
			{
				acc_x = bitconverter.ToSingle(bytes, offset + 0),
				acc_y = bitconverter.ToSingle(bytes, offset + 4),
				acc_z = bitconverter.ToSingle(bytes, offset + 8),
				temp_C = bitconverter.ToSingle(bytes, offset + 12),
				gyro_x = bitconverter.ToSingle(bytes, offset + 16),
				gyro_y = bitconverter.ToSingle(bytes, offset + 20),
				gyro_z = bitconverter.ToSingle(bytes, offset + 24),
				mag_x = bitconverter.ToSingle(bytes, offset + 28),
				mag_y = bitconverter.ToSingle(bytes, offset + 32),
				mag_z = bitconverter.ToSingle(bytes, offset + 36),
			};
		}

		internal static MavlinkMessage Deserialize_PRESSURE(byte[] bytes, int offset)
		{
			return new Msg_pressure
			{
				abs_pressure = bitconverter.ToSingle(bytes, offset + 0),
				temperature = bitconverter.ToSingle(bytes, offset + 4),
				ground_pressure = bitconverter.ToSingle(bytes, offset + 8),
				pressure_alt = bitconverter.ToSingle(bytes, offset + 12),
			};
		}

		internal static MavlinkMessage Deserialize_SONAR(byte[] bytes, int offset)
		{
			return new Msg_sonar
			{
				distance = bitconverter.ToSingle(bytes, offset + 0),
				distance_alt = bitconverter.ToSingle(bytes, offset + 4),
			};
		}

		internal static MavlinkMessage Deserialize_ATTITUDE(byte[] bytes, int offset)
		{
			return new Msg_attitude
			{
				roll = bitconverter.ToSingle(bytes, offset + 0),
				pitch = bitconverter.ToSingle(bytes, offset + 4),
				yaw = bitconverter.ToSingle(bytes, offset + 8),
				roll_speed = bitconverter.ToSingle(bytes, offset + 12),
				pitch_speed = bitconverter.ToSingle(bytes, offset + 16),
				yaw_speed = bitconverter.ToSingle(bytes, offset + 20),
			};
		}

		internal static MavlinkMessage Deserialize_POSITION(byte[] bytes, int offset)
		{
			return new Msg_position
			{
				x = bitconverter.ToSingle(bytes, offset + 0),
				y = bitconverter.ToSingle(bytes, offset + 4),
				z = bitconverter.ToSingle(bytes, offset + 8),
				x_speed = bitconverter.ToSingle(bytes, offset + 12),
				y_speed = bitconverter.ToSingle(bytes, offset + 16),
				z_speed = bitconverter.ToSingle(bytes, offset + 20),
			};
		}

		internal static MavlinkMessage Deserialize_ROCKER(byte[] bytes, int offset)
		{
			return new Msg_rocker
			{
				leftX = bitconverter.ToInt16(bytes, offset + 0),
				leftY = bitconverter.ToInt16(bytes, offset + 2),
				rightX = bitconverter.ToInt16(bytes, offset + 4),
				rightY = bitconverter.ToInt16(bytes, offset + 6),
				switchA = bitconverter.ToInt16(bytes, offset + 8),
				switchB = bitconverter.ToInt16(bytes, offset + 10),
				switchC = bitconverter.ToInt16(bytes, offset + 12),
				switchD = bitconverter.ToInt16(bytes, offset + 14),
				switchE = bitconverter.ToInt16(bytes, offset + 16),
				switchF = bitconverter.ToInt16(bytes, offset + 18),
				switchG = bitconverter.ToInt16(bytes, offset + 20),
			};
		}

		internal static MavlinkMessage Deserialize_PARAM_READ_REQUEST(byte[] bytes, int offset)
		{
			return new Msg_param_read_request
			{
				SYS_TYPE = bytes[offset + 0],
				DEV_ID = bytes[offset + 1],
				param_id = bytes[offset + 2],
			};
		}

		internal static MavlinkMessage Deserialize_PARAM_READ_ACK(byte[] bytes, int offset)
		{
			return new Msg_param_read_ack
			{
				value = bitconverter.ToSingle(bytes, offset + 0),
				param_id = bytes[offset + 4],
			};
		}

		internal static MavlinkMessage Deserialize_PARAM_WRITE(byte[] bytes, int offset)
		{
			return new Msg_param_write
			{
				value = bitconverter.ToSingle(bytes, offset + 0),
				param_id = bytes[offset + 4],
			};
		}

		internal static MavlinkMessage Deserialize_PARAM_WRITE_ACK(byte[] bytes, int offset)
		{
			return new Msg_param_write_ack
			{
				param_id = bytes[offset + 0],
			};
		}

		internal static MavlinkMessage Deserialize_CMD_WRITE(byte[] bytes, int offset)
		{
			return new Msg_cmd_write
			{
				SYS_TYPE = bytes[offset + 0],
				DEV_ID = bytes[offset + 1],
				cmd_id = bytes[offset + 2],
			};
		}

		internal static MavlinkMessage Deserialize_CMD_ACK(byte[] bytes, int offset)
		{
			return new Msg_cmd_ack
			{
				cmd_id = bytes[offset + 0],
				cmd_ack_id = bytes[offset + 1],
			};
		}

		internal static MavlinkMessage Deserialize_BATTERY_VOLTAGE(byte[] bytes, int offset)
		{
			return new Msg_battery_voltage
			{
				voltage = bitconverter.ToSingle(bytes, offset + 0),
			};
		}

		internal static MavlinkMessage Deserialize_USV_STATE(byte[] bytes, int offset)
		{
			return new Msg_usv_state
			{
				x = bitconverter.ToSingle(bytes, offset + 0),
				y = bitconverter.ToSingle(bytes, offset + 4),
				speed = bitconverter.ToSingle(bytes, offset + 8),
				course = bitconverter.ToSingle(bytes, offset + 12),
				heading = bitconverter.ToSingle(bytes, offset + 16),
			};
		}

		internal static MavlinkMessage Deserialize_USV_SET(byte[] bytes, int offset)
		{
			return new Msg_usv_set
			{
				MotorSet = bitconverter.ToInt16(bytes, offset + 0),
				RudderSet = bitconverter.ToInt16(bytes, offset + 2),
				SYS_TYPE = bytes[offset + 4],
				DEV_ID = bytes[offset + 5],
			};
		}

		internal static MavlinkMessage Deserialize_UAV_SET(byte[] bytes, int offset)
		{
			return new Msg_uav_set
			{
				X_Speed = bitconverter.ToSingle(bytes, offset + 0),
				Y_Speed = bitconverter.ToSingle(bytes, offset + 4),
				Z_Speed = bitconverter.ToSingle(bytes, offset + 8),
				SYS_TYPE = bytes[offset + 12],
				DEV_ID = bytes[offset + 13],
			};
		}

		internal static int Serialize_IMU_RAW(this Msg_imu_raw msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.acc_x_raw, bytes, offset + 0);
			bitconverter.GetBytes(msg.acc_y_raw, bytes, offset + 2);
			bitconverter.GetBytes(msg.acc_z_raw, bytes, offset + 4);
			bitconverter.GetBytes(msg.temp_raw, bytes, offset + 6);
			bitconverter.GetBytes(msg.gyro_x_raw, bytes, offset + 8);
			bitconverter.GetBytes(msg.gyro_y_raw, bytes, offset + 10);
			bitconverter.GetBytes(msg.gyro_z_raw, bytes, offset + 12);
			bitconverter.GetBytes(msg.mag_x_raw, bytes, offset + 14);
			bitconverter.GetBytes(msg.mag_y_raw, bytes, offset + 16);
			bitconverter.GetBytes(msg.mag_z_raw, bytes, offset + 18);
			offset += 20;
			return 0;
		}

		internal static int Serialize_IMU(this Msg_imu msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.acc_x, bytes, offset + 0);
			bitconverter.GetBytes(msg.acc_y, bytes, offset + 4);
			bitconverter.GetBytes(msg.acc_z, bytes, offset + 8);
			bitconverter.GetBytes(msg.temp_C, bytes, offset + 12);
			bitconverter.GetBytes(msg.gyro_x, bytes, offset + 16);
			bitconverter.GetBytes(msg.gyro_y, bytes, offset + 20);
			bitconverter.GetBytes(msg.gyro_z, bytes, offset + 24);
			bitconverter.GetBytes(msg.mag_x, bytes, offset + 28);
			bitconverter.GetBytes(msg.mag_y, bytes, offset + 32);
			bitconverter.GetBytes(msg.mag_z, bytes, offset + 36);
			offset += 40;
			return 1;
		}

		internal static int Serialize_PRESSURE(this Msg_pressure msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.abs_pressure, bytes, offset + 0);
			bitconverter.GetBytes(msg.temperature, bytes, offset + 4);
			bitconverter.GetBytes(msg.ground_pressure, bytes, offset + 8);
			bitconverter.GetBytes(msg.pressure_alt, bytes, offset + 12);
			offset += 16;
			return 2;
		}

		internal static int Serialize_SONAR(this Msg_sonar msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.distance, bytes, offset + 0);
			bitconverter.GetBytes(msg.distance_alt, bytes, offset + 4);
			offset += 8;
			return 3;
		}

		internal static int Serialize_ATTITUDE(this Msg_attitude msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.roll, bytes, offset + 0);
			bitconverter.GetBytes(msg.pitch, bytes, offset + 4);
			bitconverter.GetBytes(msg.yaw, bytes, offset + 8);
			bitconverter.GetBytes(msg.roll_speed, bytes, offset + 12);
			bitconverter.GetBytes(msg.pitch_speed, bytes, offset + 16);
			bitconverter.GetBytes(msg.yaw_speed, bytes, offset + 20);
			offset += 24;
			return 4;
		}

		internal static int Serialize_POSITION(this Msg_position msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.x, bytes, offset + 0);
			bitconverter.GetBytes(msg.y, bytes, offset + 4);
			bitconverter.GetBytes(msg.z, bytes, offset + 8);
			bitconverter.GetBytes(msg.x_speed, bytes, offset + 12);
			bitconverter.GetBytes(msg.y_speed, bytes, offset + 16);
			bitconverter.GetBytes(msg.z_speed, bytes, offset + 20);
			offset += 24;
			return 5;
		}

		internal static int Serialize_ROCKER(this Msg_rocker msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.leftX, bytes, offset + 0);
			bitconverter.GetBytes(msg.leftY, bytes, offset + 2);
			bitconverter.GetBytes(msg.rightX, bytes, offset + 4);
			bitconverter.GetBytes(msg.rightY, bytes, offset + 6);
			bitconverter.GetBytes(msg.switchA, bytes, offset + 8);
			bitconverter.GetBytes(msg.switchB, bytes, offset + 10);
			bitconverter.GetBytes(msg.switchC, bytes, offset + 12);
			bitconverter.GetBytes(msg.switchD, bytes, offset + 14);
			bitconverter.GetBytes(msg.switchE, bytes, offset + 16);
			bitconverter.GetBytes(msg.switchF, bytes, offset + 18);
			bitconverter.GetBytes(msg.switchG, bytes, offset + 20);
			offset += 22;
			return 6;
		}

		internal static int Serialize_PARAM_READ_REQUEST(this Msg_param_read_request msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.SYS_TYPE;
			bytes[offset + 1] = msg.DEV_ID;
			bytes[offset + 2] = msg.param_id;
			offset += 3;
			return 7;
		}

		internal static int Serialize_PARAM_READ_ACK(this Msg_param_read_ack msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.value, bytes, offset + 0);
			bytes[offset + 4] = msg.param_id;
			offset += 5;
			return 8;
		}

		internal static int Serialize_PARAM_WRITE(this Msg_param_write msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.value, bytes, offset + 0);
			bytes[offset + 4] = msg.param_id;
			offset += 5;
			return 9;
		}

		internal static int Serialize_PARAM_WRITE_ACK(this Msg_param_write_ack msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.param_id;
			offset += 1;
			return 10;
		}

		internal static int Serialize_CMD_WRITE(this Msg_cmd_write msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.SYS_TYPE;
			bytes[offset + 1] = msg.DEV_ID;
			bytes[offset + 2] = msg.cmd_id;
			offset += 3;
			return 11;
		}

		internal static int Serialize_CMD_ACK(this Msg_cmd_ack msg, byte[] bytes, ref int offset)
		{
			bytes[offset + 0] = msg.cmd_id;
			bytes[offset + 1] = msg.cmd_ack_id;
			offset += 2;
			return 12;
		}

		internal static int Serialize_BATTERY_VOLTAGE(this Msg_battery_voltage msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.voltage, bytes, offset + 0);
			offset += 4;
			return 13;
		}

		internal static int Serialize_USV_STATE(this Msg_usv_state msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.x, bytes, offset + 0);
			bitconverter.GetBytes(msg.y, bytes, offset + 4);
			bitconverter.GetBytes(msg.speed, bytes, offset + 8);
			bitconverter.GetBytes(msg.course, bytes, offset + 12);
			bitconverter.GetBytes(msg.heading, bytes, offset + 16);
			offset += 20;
			return 14;
		}

		internal static int Serialize_USV_SET(this Msg_usv_set msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.MotorSet, bytes, offset + 0);
			bitconverter.GetBytes(msg.RudderSet, bytes, offset + 2);
			bytes[offset + 4] = msg.SYS_TYPE;
			bytes[offset + 5] = msg.DEV_ID;
			offset += 6;
			return 15;
		}

		internal static int Serialize_UAV_SET(this Msg_uav_set msg, byte[] bytes, ref int offset)
		{
			bitconverter.GetBytes(msg.X_Speed, bytes, offset + 0);
			bitconverter.GetBytes(msg.Y_Speed, bytes, offset + 4);
			bitconverter.GetBytes(msg.Z_Speed, bytes, offset + 8);
			bytes[offset + 12] = msg.SYS_TYPE;
			bytes[offset + 13] = msg.DEV_ID;
			offset += 14;
			return 16;
		}
	}

}

